import React, { useState } from 'react'
import moment, { Moment } from 'moment'
import { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, FormControlLabel, Radio, RadioGroup, Stack, TextField } from '@mui/material'
import { DATE_PICKER_MASK, MOMENT_DATE_DISPLAY_FORMAT, MOMENT_DATE_SAVE_FORMAT } from 'utils/constants'
import { CreateCartOptions, CreateCartType } from 'components/Carts/types/create-cart.type'
import Token from 'components/Token'
import { LocalizationProvider, DesktopDatePicker } from '@mui/lab'
import AdapterMoment from '@mui/lab/AdapterMoment'


interface AddCartModalProps {
  open: boolean
  retreatId: number
  onClose: () => void
  onCreateCart: (options: CreateCartOptions) => void
}

const getCurrentDate = () => {
  return moment()
}

const getWeekAgoDate = () => {
  return moment().subtract(7, 'days')
}

const AddCartModal = ({ open, onClose, onCreateCart, retreatId }: AddCartModalProps) => {
  const [selectedCart, setSelectedCart] = useState<CreateCartType>("empty")
  const [selectedDateFrom, setSelectedDateFrom] = useState<Moment | null>(getWeekAgoDate());
  const [selectedDateTo, setSelectedDateTo] = useState<Moment | null>(getCurrentDate());

  const handleChange = (e: any) => {
    setSelectedCart(e.target.value)
  }

  return (
    <Dialog open={open} onClose={onClose} fullWidth>
      <DialogTitle><Token value="createNewCart" /> </DialogTitle>
      <DialogContent>
        <Stack spacing={1}>
          <FormControl component="fieldset">
            <RadioGroup name="cartType" value={selectedCart} onChange={handleChange}>
              <FormControlLabel value={"empty"} control={<Radio />} label={<Token value="emptyCart" />} />
              <FormControlLabel value={"generated"} control={<Radio />} label={<Token value="autoGeneratedCart" />} />
            </RadioGroup>
          </FormControl>
          <FormControl fullWidth>
            <LocalizationProvider dateAdapter={AdapterMoment}>
              <DesktopDatePicker
                disabled={selectedCart !== 'generated'}
                mask={DATE_PICKER_MASK}
                inputFormat={MOMENT_DATE_DISPLAY_FORMAT}
                value={selectedDateFrom}
                onChange={setSelectedDateFrom}
                renderInput={(params) => <TextField {...params} size="small" sx={{ minWidth: 150 }} />}
              />
            </LocalizationProvider>
          </FormControl>
          <FormControl fullWidth>
            <LocalizationProvider dateAdapter={AdapterMoment}>
              <DesktopDatePicker
                disabled={selectedCart !== 'generated'}
                mask={DATE_PICKER_MASK}
                inputFormat={MOMENT_DATE_DISPLAY_FORMAT}
                value={selectedDateTo}
                onChange={setSelectedDateTo}
                renderInput={(params) => <TextField {...params} size="small" sx={{ minWidth: 150 }} />}
              />
            </LocalizationProvider>
          </FormControl>
        </Stack>

      </DialogContent>

      <DialogActions>
        <Button onClick={onClose} color="secondary">
          <Token value="cancel" />
        </Button>
        <Button
          onClick={() => onCreateCart({
            type: selectedCart,
            from: selectedDateFrom ? (selectedDateFrom as Moment).format(MOMENT_DATE_SAVE_FORMAT) : '',
            to: selectedDateTo ? (selectedDateTo as Moment).format(MOMENT_DATE_SAVE_FORMAT) : '',
          })}
          color="primary"
        >
          <Token value="create" />
        </Button>
      </DialogActions>
    </Dialog>
  )
}

export default AddCartModal
